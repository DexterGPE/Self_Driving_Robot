image: python:3.9-slim-bullseye

stages: ## Organize and Order parts of the pipeline
#    - build
    - tests
    - deploy

#build-job:
#  stage: build
#  script:
#    - pip install -r requirements.txt
#    - echo "Fill Build Stage"

test-job:
  stage: tests
  before_script:
    - pip install -r requirements.txt
  script:
    - pytest --cov=src --cov-report=xml --cov-report=term --cov-fail-under=80 src/tests/
  coverage: '/^TOTAL\s+(\d+)%/'
  artifacts:
    paths:
      - coverage.xml
    expire_in: 1 week

codestyle-check:
  stage: tests
  before_script:
    - pip install pycodestyle==2.11.1
  script:
    - pycodestyle src/ || exit 1

deploy-job:
  stage: deploy
  only:
    - main
  script:
#    - if [ "$CI_COMMIT_BRANCH" != "main" ]; then echo "Not on main branch. Skipping deployment."; exit 0; fi
    # Replace <RASPBERRY_PI_IP> and <RASPBERRY_PI_USER> with actual values
    - eval $(ssh-agent -s)
    - chmod 400 "$AWS_SECRET_ACCESS_KEY"
    - ssh-add "$AWS_SECRET_ACCESS_KEY"
#    - ssh pi@10.10.1.151 'cd /Desktop/Test_Scripts'
    - ssh pi@10.10.1.151 'mkdir -p ~/testingSSHfolder'
#    - scp -r ./ <RASPBERRY_PI_USER>@<RASPBERRY_PI_IP>:~/project/
#    - echo "Installing dependencies and running application on Raspberry Pi..."
#    - ssh <RASPBERRY_PI_USER>@<RASPBERRY_PI_IP> '
#        cd ~/project;
#        # Set up virtual environment
#        if [ ! -d "venv" ]; then python3 -m venv venv; fi;
#        source venv/bin/activate;
#        pip install --upgrade pip;
#        pip install -r requirements.txt;
#        echo "Starting application...";
#        python app.py &  # Replace app.py with your entry point;
#        echo "Application started.";
#      '